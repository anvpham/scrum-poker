version: 2.1
jobs:

  build:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
        user: root
    steps:
      - checkout
      - run:
          name: Build
          working_directory: ~/project/backend/scrum-poker-server
          command: dotnet build

  build-and-push-docker-image:
    machine:
      image: ubuntu-2204:2023.07.1
    steps:
      - checkout
      - run:
          name: Login to Docker Hub
          command: |
            printenv DOCKER_ACCESS_TOKEN | docker login --username anvpham --password-stdin
      - run:
          name: Build Docker image 
          command: |
            docker build -t anvpham/scrum-poker-api:latest .
      - run:
          name: Push Docker image 
          command: |
            docker push anvpham/scrum-poker-api:latest

  unit-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
        user: root
    steps:
      - checkout
      - run:
          name: Run unit tests
          working_directory: ~/project/backend/tests/UnitTests
          command: dotnet test

  integration-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
        user: root
    steps:
      - checkout
      - run:
          name: Run integration tests
          working_directory: ~/project/backend/tests/IntegrationTests
          command: dotnet test

  load-test:
    docker:
      - image: locustio/locust:2.9.0
        user: root
    steps:
      - attach_workspace:
          at: ~/tmp/workspace
      - checkout
      - run:
          name: Setup env variables for load testing
          working_directory: ~/tmp/workspace
          command: |
            cat bash.env >> $BASH_ENV
      - run:
          name: Wait for ECS service to start
          command: |
            sleep 30
      - run:
          name: Run load tests using Python Locust
          working_directory: ~/project/backend/tests/LoadTests
          command: locust

  terraform-plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            terraform init -input=false
            terraform plan -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run terraform apply
          command: |
            terraform apply -auto-approve tfapply
      - run:
          name: Get AWS alb url and pass to load-test job env variables
          command: |
            alb_url=$(terraform output -raw alb_url)
            echo "export LOAD_TEST_API_HOST=$alb_url" >> $BASH_ENV
            cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  terraform-plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            terraform plan -destroy -out tfdestroy
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            terraform apply -auto-approve tfdestroy

workflows:
  build-and-test:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - unit-test:
          requires:
            - build
      - integration-test:
          requires:
            - build
      - build-and-push-docker-image:
          requires:
            - unit-test
            - integration-test
      - terraform-plan-apply:
          requires:
            - build-and-push-docker-image
      - terraform-apply:
          requires:
            - terraform-plan-apply
      - load-test:
          requires:
            - terraform-apply
      - terraform-plan-destroy:
          requires:
            - terraform-apply
            - load-test
      - terraform-destroy:
          requires:
            - terraform-plan-destroy
